COMMAND LINE PARSING

You can declare a var as Oarg<type>(string NAMES, type DEF_VAL, string DESCRIPTION, int POS_N_FOUND)

NAMES is the name parser will look for in order to find your argument. If you set, for instance, NAMES = "-i --ival", the program will look for occurrences of both "-i" and "--ival" in the command line. 

There's a policy you MUST follow for COMMAND LINE NAMES:
	-names with single letter begin with single "-". Example: If you want a name "n", it must be passed in the command line as "-n".
	-names with more than one letter begin with "--". Example: "int-argument" must become "--int-argument". 
	-names to be looked in the COMMAND LINE must never be terminated with character ':'. 

Even if you don't follow these rules when declaring an instance of class Oarg<type>, the program will force it to become conformant with it's policy. If you create an instance Oarg<type> arg("i int-val integer:",DEF_VAL,DESCRIPTION), the program will store the keywords to be looked for in command line as "-i", "--int-val" and "--integer".

DEF_VAL is the default value of type "type" the program will return if nothing is found in parsing anyway. 

DESCRIPTION is a description of the argument. The descriptions of all arguments can be read by invoking the method describeArgs(string helpmsg = "").

POS_N_FOUND is the position of remaining arguments (the ones that don't follow a keyword) that the program will take as the argument for Oarg if it's keyword was not found.

In order to get the value after parsing, you must invoke the method Oarg<type>::getVal(int index = 0). The values found in command line are stored in a vector and the program assumes every argument separated with commas and/or spaces until a new name comes is an argument of the instance of the object. If you have an instance Oarg<float> arg("-f",0.1,"") and the argv has the form "--val 3 -f 0.4, 21 , 0.89 --val2 'string'", every number from 0.4 to 0.89 will be stored as an argument of instance arg. in method 'getVal', argument index defines the index of the argument in the argument vector stored.

If you pass a string started with "-", the program will interpret the string as a name. To solve this, put a character "\" before the string (eg. "\-ey b0ss"). The program will then interpret correctly your string as an argument "-ey b0ss".
To pass a string with comma without being misinpertreted, use '\,' instead.

To finally parse, one must invoke parse(int argc, char** argv).

FILE PARSING

The process is similar to command line parsing. 

There's also a policy you MUST follow for FILE PARSING NAMES:
	-names to be parsed in files must terminate with a single ":" and NEVER start with any number of "-"s.
Even if you don't follow the rules, the program will force it to be conformant to it's policy. If you instantiate a class, eg. Oarg<type> arg("----arg-value:::::",DEF_VAL,DESCRIPTION), the name to be parsed in a file parse will be "arg-value:" automatically.

In this case, multiple arguments must be separated by (any number of) whitespaces.

To parse in a file, one must invoke parse(const string& filename).
